// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                          //                                       clk_0_clk.clk
		input  wire        CPU_reset_n_reset_bridge_in_reset_reset,                //               CPU_reset_n_reset_bridge_in_reset.reset
		input  wire        Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset,  // Pixel_Processor_DMA_reset_reset_bridge_in_reset.reset
		input  wire [21:0] CPU_data_master_address,                                //                                 CPU_data_master.address
		output wire        CPU_data_master_waitrequest,                            //                                                .waitrequest
		input  wire [3:0]  CPU_data_master_byteenable,                             //                                                .byteenable
		input  wire        CPU_data_master_read,                                   //                                                .read
		output wire [31:0] CPU_data_master_readdata,                               //                                                .readdata
		input  wire        CPU_data_master_write,                                  //                                                .write
		input  wire [31:0] CPU_data_master_writedata,                              //                                                .writedata
		input  wire        CPU_data_master_debugaccess,                            //                                                .debugaccess
		input  wire [21:0] CPU_instruction_master_address,                         //                          CPU_instruction_master.address
		output wire        CPU_instruction_master_waitrequest,                     //                                                .waitrequest
		input  wire        CPU_instruction_master_read,                            //                                                .read
		output wire [31:0] CPU_instruction_master_readdata,                        //                                                .readdata
		input  wire [31:0] Pixel_Buffer_DMA_avalon_pixel_dma_master_address,       //        Pixel_Buffer_DMA_avalon_pixel_dma_master.address
		output wire        Pixel_Buffer_DMA_avalon_pixel_dma_master_waitrequest,   //                                                .waitrequest
		input  wire        Pixel_Buffer_DMA_avalon_pixel_dma_master_read,          //                                                .read
		output wire [15:0] Pixel_Buffer_DMA_avalon_pixel_dma_master_readdata,      //                                                .readdata
		output wire        Pixel_Buffer_DMA_avalon_pixel_dma_master_readdatavalid, //                                                .readdatavalid
		input  wire        Pixel_Buffer_DMA_avalon_pixel_dma_master_lock,          //                                                .lock
		input  wire [31:0] Pixel_Processor_DMA_avalon_master_address,              //               Pixel_Processor_DMA_avalon_master.address
		output wire        Pixel_Processor_DMA_avalon_master_waitrequest,          //                                                .waitrequest
		input  wire        Pixel_Processor_DMA_avalon_master_write,                //                                                .write
		input  wire [15:0] Pixel_Processor_DMA_avalon_master_writedata,            //                                                .writedata
		output wire [1:0]  AV_Config_avalon_av_config_slave_address,               //                AV_Config_avalon_av_config_slave.address
		output wire        AV_Config_avalon_av_config_slave_write,                 //                                                .write
		output wire        AV_Config_avalon_av_config_slave_read,                  //                                                .read
		input  wire [31:0] AV_Config_avalon_av_config_slave_readdata,              //                                                .readdata
		output wire [31:0] AV_Config_avalon_av_config_slave_writedata,             //                                                .writedata
		output wire [3:0]  AV_Config_avalon_av_config_slave_byteenable,            //                                                .byteenable
		input  wire        AV_Config_avalon_av_config_slave_waitrequest,           //                                                .waitrequest
		output wire [8:0]  CPU_jtag_debug_module_address,                          //                           CPU_jtag_debug_module.address
		output wire        CPU_jtag_debug_module_write,                            //                                                .write
		output wire        CPU_jtag_debug_module_read,                             //                                                .read
		input  wire [31:0] CPU_jtag_debug_module_readdata,                         //                                                .readdata
		output wire [31:0] CPU_jtag_debug_module_writedata,                        //                                                .writedata
		output wire [3:0]  CPU_jtag_debug_module_byteenable,                       //                                                .byteenable
		input  wire        CPU_jtag_debug_module_waitrequest,                      //                                                .waitrequest
		output wire        CPU_jtag_debug_module_debugaccess,                      //                                                .debugaccess
		output wire [11:0] Onchip_Memory_s1_address,                               //                                Onchip_Memory_s1.address
		output wire        Onchip_Memory_s1_write,                                 //                                                .write
		input  wire [31:0] Onchip_Memory_s1_readdata,                              //                                                .readdata
		output wire [31:0] Onchip_Memory_s1_writedata,                             //                                                .writedata
		output wire [3:0]  Onchip_Memory_s1_byteenable,                            //                                                .byteenable
		output wire        Onchip_Memory_s1_chipselect,                            //                                                .chipselect
		output wire        Onchip_Memory_s1_clken,                                 //                                                .clken
		output wire [19:0] Pixel_Buffer_avalon_sram_slave_address,                 //                  Pixel_Buffer_avalon_sram_slave.address
		output wire        Pixel_Buffer_avalon_sram_slave_write,                   //                                                .write
		output wire        Pixel_Buffer_avalon_sram_slave_read,                    //                                                .read
		input  wire [15:0] Pixel_Buffer_avalon_sram_slave_readdata,                //                                                .readdata
		output wire [15:0] Pixel_Buffer_avalon_sram_slave_writedata,               //                                                .writedata
		output wire [1:0]  Pixel_Buffer_avalon_sram_slave_byteenable,              //                                                .byteenable
		input  wire        Pixel_Buffer_avalon_sram_slave_readdatavalid,           //                                                .readdatavalid
		output wire [1:0]  Pixel_Buffer_DMA_avalon_control_slave_address,          //           Pixel_Buffer_DMA_avalon_control_slave.address
		output wire        Pixel_Buffer_DMA_avalon_control_slave_write,            //                                                .write
		output wire        Pixel_Buffer_DMA_avalon_control_slave_read,             //                                                .read
		input  wire [31:0] Pixel_Buffer_DMA_avalon_control_slave_readdata,         //                                                .readdata
		output wire [31:0] Pixel_Buffer_DMA_avalon_control_slave_writedata,        //                                                .writedata
		output wire [3:0]  Pixel_Buffer_DMA_avalon_control_slave_byteenable        //                                                .byteenable
	);

	wire          pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_waitrequest;          // Pixel_Processor_DMA_avalon_master_agent:av_waitrequest -> Pixel_Processor_DMA_avalon_master_translator:uav_waitrequest
	wire   [15:0] pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_readdata;             // Pixel_Processor_DMA_avalon_master_agent:av_readdata -> Pixel_Processor_DMA_avalon_master_translator:uav_readdata
	wire          pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_debugaccess;          // Pixel_Processor_DMA_avalon_master_translator:uav_debugaccess -> Pixel_Processor_DMA_avalon_master_agent:av_debugaccess
	wire   [31:0] pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_address;              // Pixel_Processor_DMA_avalon_master_translator:uav_address -> Pixel_Processor_DMA_avalon_master_agent:av_address
	wire          pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_read;                 // Pixel_Processor_DMA_avalon_master_translator:uav_read -> Pixel_Processor_DMA_avalon_master_agent:av_read
	wire    [1:0] pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_byteenable;           // Pixel_Processor_DMA_avalon_master_translator:uav_byteenable -> Pixel_Processor_DMA_avalon_master_agent:av_byteenable
	wire          pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid;        // Pixel_Processor_DMA_avalon_master_agent:av_readdatavalid -> Pixel_Processor_DMA_avalon_master_translator:uav_readdatavalid
	wire          pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_lock;                 // Pixel_Processor_DMA_avalon_master_translator:uav_lock -> Pixel_Processor_DMA_avalon_master_agent:av_lock
	wire          pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_write;                // Pixel_Processor_DMA_avalon_master_translator:uav_write -> Pixel_Processor_DMA_avalon_master_agent:av_write
	wire   [15:0] pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_writedata;            // Pixel_Processor_DMA_avalon_master_translator:uav_writedata -> Pixel_Processor_DMA_avalon_master_agent:av_writedata
	wire    [1:0] pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_burstcount;           // Pixel_Processor_DMA_avalon_master_translator:uav_burstcount -> Pixel_Processor_DMA_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                           // rsp_mux:src_valid -> Pixel_Processor_DMA_avalon_master_agent:rp_valid
	wire   [89:0] rsp_mux_src_data;                                                                            // rsp_mux:src_data -> Pixel_Processor_DMA_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                           // Pixel_Processor_DMA_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                                         // rsp_mux:src_channel -> Pixel_Processor_DMA_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                   // rsp_mux:src_startofpacket -> Pixel_Processor_DMA_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                     // rsp_mux:src_endofpacket -> Pixel_Processor_DMA_avalon_master_agent:rp_endofpacket
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;   // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_waitrequest -> Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_waitrequest
	wire   [15:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata;      // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_readdata -> Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_readdata
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;   // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_debugaccess -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_address;       // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_address -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_address
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_read;          // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_read -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_read
	wire    [1:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable;    // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_byteenable -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_byteenable
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid; // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_readdatavalid -> Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_readdatavalid
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock;          // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_lock -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_lock
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_write;         // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_write -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_write
	wire   [15:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata;     // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_writedata -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_writedata
	wire    [1:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount;    // Pixel_Buffer_DMA_avalon_pixel_dma_master_translator:uav_burstcount -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                       // rsp_mux_001:src_valid -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:rp_valid
	wire   [89:0] rsp_mux_001_src_data;                                                                        // rsp_mux_001:src_data -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                       // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                                     // rsp_mux_001:src_channel -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                               // rsp_mux_001:src_startofpacket -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                 // rsp_mux_001:src_endofpacket -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:rp_endofpacket
	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                            // CPU_data_master_agent:av_waitrequest -> CPU_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                               // CPU_data_master_agent:av_readdata -> CPU_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                            // CPU_data_master_translator:uav_debugaccess -> CPU_data_master_agent:av_debugaccess
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;                                // CPU_data_master_translator:uav_address -> CPU_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                   // CPU_data_master_translator:uav_read -> CPU_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                             // CPU_data_master_translator:uav_byteenable -> CPU_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                          // CPU_data_master_agent:av_readdatavalid -> CPU_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                   // CPU_data_master_translator:uav_lock -> CPU_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                  // CPU_data_master_translator:uav_write -> CPU_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                              // CPU_data_master_translator:uav_writedata -> CPU_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                             // CPU_data_master_translator:uav_burstcount -> CPU_data_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                       // rsp_mux_002:src_valid -> CPU_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_002_src_data;                                                                        // rsp_mux_002:src_data -> CPU_data_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                       // CPU_data_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                                     // rsp_mux_002:src_channel -> CPU_data_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                               // rsp_mux_002:src_startofpacket -> CPU_data_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                 // rsp_mux_002:src_endofpacket -> CPU_data_master_agent:rp_endofpacket
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                     // CPU_instruction_master_agent:av_waitrequest -> CPU_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                        // CPU_instruction_master_agent:av_readdata -> CPU_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                     // CPU_instruction_master_translator:uav_debugaccess -> CPU_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                         // CPU_instruction_master_translator:uav_address -> CPU_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                            // CPU_instruction_master_translator:uav_read -> CPU_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                      // CPU_instruction_master_translator:uav_byteenable -> CPU_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                   // CPU_instruction_master_agent:av_readdatavalid -> CPU_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                            // CPU_instruction_master_translator:uav_lock -> CPU_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                           // CPU_instruction_master_translator:uav_write -> CPU_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                       // CPU_instruction_master_translator:uav_writedata -> CPU_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                      // CPU_instruction_master_translator:uav_burstcount -> CPU_instruction_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                       // rsp_mux_003:src_valid -> CPU_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_003_src_data;                                                                        // rsp_mux_003:src_data -> CPU_instruction_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                       // CPU_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [4:0] rsp_mux_003_src_channel;                                                                     // rsp_mux_003:src_channel -> CPU_instruction_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                               // rsp_mux_003:src_startofpacket -> CPU_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                 // rsp_mux_003:src_endofpacket -> CPU_instruction_master_agent:rp_endofpacket
	wire   [15:0] pixel_buffer_avalon_sram_slave_agent_m0_readdata;                                            // Pixel_Buffer_avalon_sram_slave_translator:uav_readdata -> Pixel_Buffer_avalon_sram_slave_agent:m0_readdata
	wire          pixel_buffer_avalon_sram_slave_agent_m0_waitrequest;                                         // Pixel_Buffer_avalon_sram_slave_translator:uav_waitrequest -> Pixel_Buffer_avalon_sram_slave_agent:m0_waitrequest
	wire          pixel_buffer_avalon_sram_slave_agent_m0_debugaccess;                                         // Pixel_Buffer_avalon_sram_slave_agent:m0_debugaccess -> Pixel_Buffer_avalon_sram_slave_translator:uav_debugaccess
	wire   [31:0] pixel_buffer_avalon_sram_slave_agent_m0_address;                                             // Pixel_Buffer_avalon_sram_slave_agent:m0_address -> Pixel_Buffer_avalon_sram_slave_translator:uav_address
	wire    [1:0] pixel_buffer_avalon_sram_slave_agent_m0_byteenable;                                          // Pixel_Buffer_avalon_sram_slave_agent:m0_byteenable -> Pixel_Buffer_avalon_sram_slave_translator:uav_byteenable
	wire          pixel_buffer_avalon_sram_slave_agent_m0_read;                                                // Pixel_Buffer_avalon_sram_slave_agent:m0_read -> Pixel_Buffer_avalon_sram_slave_translator:uav_read
	wire          pixel_buffer_avalon_sram_slave_agent_m0_readdatavalid;                                       // Pixel_Buffer_avalon_sram_slave_translator:uav_readdatavalid -> Pixel_Buffer_avalon_sram_slave_agent:m0_readdatavalid
	wire          pixel_buffer_avalon_sram_slave_agent_m0_lock;                                                // Pixel_Buffer_avalon_sram_slave_agent:m0_lock -> Pixel_Buffer_avalon_sram_slave_translator:uav_lock
	wire   [15:0] pixel_buffer_avalon_sram_slave_agent_m0_writedata;                                           // Pixel_Buffer_avalon_sram_slave_agent:m0_writedata -> Pixel_Buffer_avalon_sram_slave_translator:uav_writedata
	wire          pixel_buffer_avalon_sram_slave_agent_m0_write;                                               // Pixel_Buffer_avalon_sram_slave_agent:m0_write -> Pixel_Buffer_avalon_sram_slave_translator:uav_write
	wire    [1:0] pixel_buffer_avalon_sram_slave_agent_m0_burstcount;                                          // Pixel_Buffer_avalon_sram_slave_agent:m0_burstcount -> Pixel_Buffer_avalon_sram_slave_translator:uav_burstcount
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_valid;                                        // Pixel_Buffer_avalon_sram_slave_agent:rf_source_valid -> Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:in_valid
	wire   [90:0] pixel_buffer_avalon_sram_slave_agent_rf_source_data;                                         // Pixel_Buffer_avalon_sram_slave_agent:rf_source_data -> Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:in_data
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_ready;                                        // Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:in_ready -> Pixel_Buffer_avalon_sram_slave_agent:rf_source_ready
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_startofpacket;                                // Pixel_Buffer_avalon_sram_slave_agent:rf_source_startofpacket -> Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_endofpacket;                                  // Pixel_Buffer_avalon_sram_slave_agent:rf_source_endofpacket -> Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_valid;                                     // Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:out_valid -> Pixel_Buffer_avalon_sram_slave_agent:rf_sink_valid
	wire   [90:0] pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_data;                                      // Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:out_data -> Pixel_Buffer_avalon_sram_slave_agent:rf_sink_data
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_ready;                                     // Pixel_Buffer_avalon_sram_slave_agent:rf_sink_ready -> Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:out_ready
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_startofpacket;                             // Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:out_startofpacket -> Pixel_Buffer_avalon_sram_slave_agent:rf_sink_startofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_endofpacket;                               // Pixel_Buffer_avalon_sram_slave_agent_rsp_fifo:out_endofpacket -> Pixel_Buffer_avalon_sram_slave_agent:rf_sink_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_valid;                                   // Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_src_valid -> Pixel_Buffer_avalon_sram_slave_agent_rdata_fifo:in_valid
	wire   [17:0] pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_data;                                    // Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_src_data -> Pixel_Buffer_avalon_sram_slave_agent_rdata_fifo:in_data
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_ready;                                   // Pixel_Buffer_avalon_sram_slave_agent_rdata_fifo:in_ready -> Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_src_ready
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                                          // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          av_config_avalon_av_config_slave_agent_m0_waitrequest;                                       // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          av_config_avalon_av_config_slave_agent_m0_debugaccess;                                       // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_address;                                           // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                                        // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          av_config_avalon_av_config_slave_agent_m0_read;                                              // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire          av_config_avalon_av_config_slave_agent_m0_readdatavalid;                                     // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          av_config_avalon_av_config_slave_agent_m0_lock;                                              // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                                         // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          av_config_avalon_av_config_slave_agent_m0_write;                                             // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                                        // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          av_config_avalon_av_config_slave_agent_rf_source_valid;                                      // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [108:0] av_config_avalon_av_config_slave_agent_rf_source_data;                                       // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rf_source_ready;                                      // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                              // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                                // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                                   // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [108:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                                    // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                                   // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                           // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                             // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                       // cmd_mux_001:src_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                                        // cmd_mux_001:src_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                       // AV_Config_avalon_av_config_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                                     // cmd_mux_001:src_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                               // cmd_mux_001:src_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                 // cmd_mux_001:src_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire   [31:0] pixel_buffer_dma_avalon_control_slave_agent_m0_readdata;                                     // Pixel_Buffer_DMA_avalon_control_slave_translator:uav_readdata -> Pixel_Buffer_DMA_avalon_control_slave_agent:m0_readdata
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_waitrequest;                                  // Pixel_Buffer_DMA_avalon_control_slave_translator:uav_waitrequest -> Pixel_Buffer_DMA_avalon_control_slave_agent:m0_waitrequest
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_debugaccess;                                  // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_debugaccess -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_debugaccess
	wire   [31:0] pixel_buffer_dma_avalon_control_slave_agent_m0_address;                                      // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_address -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_address
	wire    [3:0] pixel_buffer_dma_avalon_control_slave_agent_m0_byteenable;                                   // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_byteenable -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_byteenable
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_read;                                         // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_read -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_read
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_readdatavalid;                                // Pixel_Buffer_DMA_avalon_control_slave_translator:uav_readdatavalid -> Pixel_Buffer_DMA_avalon_control_slave_agent:m0_readdatavalid
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_lock;                                         // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_lock -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_lock
	wire   [31:0] pixel_buffer_dma_avalon_control_slave_agent_m0_writedata;                                    // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_writedata -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_writedata
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_write;                                        // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_write -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_write
	wire    [2:0] pixel_buffer_dma_avalon_control_slave_agent_m0_burstcount;                                   // Pixel_Buffer_DMA_avalon_control_slave_agent:m0_burstcount -> Pixel_Buffer_DMA_avalon_control_slave_translator:uav_burstcount
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_valid;                                 // Pixel_Buffer_DMA_avalon_control_slave_agent:rf_source_valid -> Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] pixel_buffer_dma_avalon_control_slave_agent_rf_source_data;                                  // Pixel_Buffer_DMA_avalon_control_slave_agent:rf_source_data -> Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:in_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_ready;                                 // Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:in_ready -> Pixel_Buffer_DMA_avalon_control_slave_agent:rf_source_ready
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_startofpacket;                         // Pixel_Buffer_DMA_avalon_control_slave_agent:rf_source_startofpacket -> Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_endofpacket;                           // Pixel_Buffer_DMA_avalon_control_slave_agent:rf_source_endofpacket -> Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_valid;                              // Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:out_valid -> Pixel_Buffer_DMA_avalon_control_slave_agent:rf_sink_valid
	wire  [108:0] pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_data;                               // Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:out_data -> Pixel_Buffer_DMA_avalon_control_slave_agent:rf_sink_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_ready;                              // Pixel_Buffer_DMA_avalon_control_slave_agent:rf_sink_ready -> Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                      // Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> Pixel_Buffer_DMA_avalon_control_slave_agent:rf_sink_startofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                        // Pixel_Buffer_DMA_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> Pixel_Buffer_DMA_avalon_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                       // cmd_mux_002:src_valid -> Pixel_Buffer_DMA_avalon_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                                        // cmd_mux_002:src_data -> Pixel_Buffer_DMA_avalon_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                       // Pixel_Buffer_DMA_avalon_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                                     // cmd_mux_002:src_channel -> Pixel_Buffer_DMA_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                               // cmd_mux_002:src_startofpacket -> Pixel_Buffer_DMA_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                 // cmd_mux_002:src_endofpacket -> Pixel_Buffer_DMA_avalon_control_slave_agent:cp_endofpacket
	wire   [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                                     // CPU_jtag_debug_module_translator:uav_readdata -> CPU_jtag_debug_module_agent:m0_readdata
	wire          cpu_jtag_debug_module_agent_m0_waitrequest;                                                  // CPU_jtag_debug_module_translator:uav_waitrequest -> CPU_jtag_debug_module_agent:m0_waitrequest
	wire          cpu_jtag_debug_module_agent_m0_debugaccess;                                                  // CPU_jtag_debug_module_agent:m0_debugaccess -> CPU_jtag_debug_module_translator:uav_debugaccess
	wire   [31:0] cpu_jtag_debug_module_agent_m0_address;                                                      // CPU_jtag_debug_module_agent:m0_address -> CPU_jtag_debug_module_translator:uav_address
	wire    [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                                   // CPU_jtag_debug_module_agent:m0_byteenable -> CPU_jtag_debug_module_translator:uav_byteenable
	wire          cpu_jtag_debug_module_agent_m0_read;                                                         // CPU_jtag_debug_module_agent:m0_read -> CPU_jtag_debug_module_translator:uav_read
	wire          cpu_jtag_debug_module_agent_m0_readdatavalid;                                                // CPU_jtag_debug_module_translator:uav_readdatavalid -> CPU_jtag_debug_module_agent:m0_readdatavalid
	wire          cpu_jtag_debug_module_agent_m0_lock;                                                         // CPU_jtag_debug_module_agent:m0_lock -> CPU_jtag_debug_module_translator:uav_lock
	wire   [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                                    // CPU_jtag_debug_module_agent:m0_writedata -> CPU_jtag_debug_module_translator:uav_writedata
	wire          cpu_jtag_debug_module_agent_m0_write;                                                        // CPU_jtag_debug_module_agent:m0_write -> CPU_jtag_debug_module_translator:uav_write
	wire    [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                                   // CPU_jtag_debug_module_agent:m0_burstcount -> CPU_jtag_debug_module_translator:uav_burstcount
	wire          cpu_jtag_debug_module_agent_rf_source_valid;                                                 // CPU_jtag_debug_module_agent:rf_source_valid -> CPU_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [108:0] cpu_jtag_debug_module_agent_rf_source_data;                                                  // CPU_jtag_debug_module_agent:rf_source_data -> CPU_jtag_debug_module_agent_rsp_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rf_source_ready;                                                 // CPU_jtag_debug_module_agent_rsp_fifo:in_ready -> CPU_jtag_debug_module_agent:rf_source_ready
	wire          cpu_jtag_debug_module_agent_rf_source_startofpacket;                                         // CPU_jtag_debug_module_agent:rf_source_startofpacket -> CPU_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          cpu_jtag_debug_module_agent_rf_source_endofpacket;                                           // CPU_jtag_debug_module_agent:rf_source_endofpacket -> CPU_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                                              // CPU_jtag_debug_module_agent_rsp_fifo:out_valid -> CPU_jtag_debug_module_agent:rf_sink_valid
	wire  [108:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                                               // CPU_jtag_debug_module_agent_rsp_fifo:out_data -> CPU_jtag_debug_module_agent:rf_sink_data
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                                              // CPU_jtag_debug_module_agent:rf_sink_ready -> CPU_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                                      // CPU_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> CPU_jtag_debug_module_agent:rf_sink_startofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                                        // CPU_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> CPU_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                       // cmd_mux_003:src_valid -> CPU_jtag_debug_module_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                                        // cmd_mux_003:src_data -> CPU_jtag_debug_module_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                       // CPU_jtag_debug_module_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                                     // cmd_mux_003:src_channel -> CPU_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                               // cmd_mux_003:src_startofpacket -> CPU_jtag_debug_module_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                 // cmd_mux_003:src_endofpacket -> CPU_jtag_debug_module_agent:cp_endofpacket
	wire   [31:0] onchip_memory_s1_agent_m0_readdata;                                                          // Onchip_Memory_s1_translator:uav_readdata -> Onchip_Memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                                                       // Onchip_Memory_s1_translator:uav_waitrequest -> Onchip_Memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                                                       // Onchip_Memory_s1_agent:m0_debugaccess -> Onchip_Memory_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory_s1_agent_m0_address;                                                           // Onchip_Memory_s1_agent:m0_address -> Onchip_Memory_s1_translator:uav_address
	wire    [3:0] onchip_memory_s1_agent_m0_byteenable;                                                        // Onchip_Memory_s1_agent:m0_byteenable -> Onchip_Memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                                                              // Onchip_Memory_s1_agent:m0_read -> Onchip_Memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;                                                     // Onchip_Memory_s1_translator:uav_readdatavalid -> Onchip_Memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                                                              // Onchip_Memory_s1_agent:m0_lock -> Onchip_Memory_s1_translator:uav_lock
	wire   [31:0] onchip_memory_s1_agent_m0_writedata;                                                         // Onchip_Memory_s1_agent:m0_writedata -> Onchip_Memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                                                             // Onchip_Memory_s1_agent:m0_write -> Onchip_Memory_s1_translator:uav_write
	wire    [2:0] onchip_memory_s1_agent_m0_burstcount;                                                        // Onchip_Memory_s1_agent:m0_burstcount -> Onchip_Memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;                                                      // Onchip_Memory_s1_agent:rf_source_valid -> Onchip_Memory_s1_agent_rsp_fifo:in_valid
	wire  [108:0] onchip_memory_s1_agent_rf_source_data;                                                       // Onchip_Memory_s1_agent:rf_source_data -> Onchip_Memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                                                      // Onchip_Memory_s1_agent_rsp_fifo:in_ready -> Onchip_Memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                                              // Onchip_Memory_s1_agent:rf_source_startofpacket -> Onchip_Memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                                                // Onchip_Memory_s1_agent:rf_source_endofpacket -> Onchip_Memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                                                   // Onchip_Memory_s1_agent_rsp_fifo:out_valid -> Onchip_Memory_s1_agent:rf_sink_valid
	wire  [108:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                                    // Onchip_Memory_s1_agent_rsp_fifo:out_data -> Onchip_Memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                                                   // Onchip_Memory_s1_agent:rf_sink_ready -> Onchip_Memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                           // Onchip_Memory_s1_agent_rsp_fifo:out_startofpacket -> Onchip_Memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                             // Onchip_Memory_s1_agent_rsp_fifo:out_endofpacket -> Onchip_Memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                       // cmd_mux_004:src_valid -> Onchip_Memory_s1_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                                        // cmd_mux_004:src_data -> Onchip_Memory_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                       // Onchip_Memory_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                                     // cmd_mux_004:src_channel -> Onchip_Memory_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                               // cmd_mux_004:src_startofpacket -> Onchip_Memory_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                 // cmd_mux_004:src_endofpacket -> Onchip_Memory_s1_agent:cp_endofpacket
	wire          pixel_processor_dma_avalon_master_agent_cp_valid;                                            // Pixel_Processor_DMA_avalon_master_agent:cp_valid -> router:sink_valid
	wire   [89:0] pixel_processor_dma_avalon_master_agent_cp_data;                                             // Pixel_Processor_DMA_avalon_master_agent:cp_data -> router:sink_data
	wire          pixel_processor_dma_avalon_master_agent_cp_ready;                                            // router:sink_ready -> Pixel_Processor_DMA_avalon_master_agent:cp_ready
	wire          pixel_processor_dma_avalon_master_agent_cp_startofpacket;                                    // Pixel_Processor_DMA_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pixel_processor_dma_avalon_master_agent_cp_endofpacket;                                      // Pixel_Processor_DMA_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                            // router:src_valid -> cmd_demux:sink_valid
	wire   [89:0] router_src_data;                                                                             // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                            // cmd_demux:sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                                          // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_valid;                                     // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:cp_valid -> router_001:sink_valid
	wire   [89:0] pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_data;                                      // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:cp_data -> router_001:sink_data
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_ready;                                     // router_001:sink_ready -> Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:cp_ready
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_startofpacket;                             // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_endofpacket;                               // Pixel_Buffer_DMA_avalon_pixel_dma_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                        // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [89:0] router_001_src_data;                                                                         // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                        // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                                      // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                  // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                                              // CPU_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [107:0] cpu_data_master_agent_cp_data;                                                               // CPU_data_master_agent:cp_data -> router_002:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                              // router_002:sink_ready -> CPU_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                                      // CPU_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                                        // CPU_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                        // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [107:0] router_002_src_data;                                                                         // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                        // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                                      // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                  // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                                       // CPU_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [107:0] cpu_instruction_master_agent_cp_data;                                                        // CPU_instruction_master_agent:cp_data -> router_003:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                                       // router_003:sink_ready -> CPU_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                               // CPU_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                                 // CPU_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                        // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [107:0] router_003_src_data;                                                                         // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                        // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                                      // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                                // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                  // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rp_valid;                                               // Pixel_Buffer_avalon_sram_slave_agent:rp_valid -> router_004:sink_valid
	wire   [89:0] pixel_buffer_avalon_sram_slave_agent_rp_data;                                                // Pixel_Buffer_avalon_sram_slave_agent:rp_data -> router_004:sink_data
	wire          pixel_buffer_avalon_sram_slave_agent_rp_ready;                                               // router_004:sink_ready -> Pixel_Buffer_avalon_sram_slave_agent:rp_ready
	wire          pixel_buffer_avalon_sram_slave_agent_rp_startofpacket;                                       // Pixel_Buffer_avalon_sram_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rp_endofpacket;                                         // Pixel_Buffer_avalon_sram_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                        // router_004:src_valid -> rsp_demux:sink_valid
	wire   [89:0] router_004_src_data;                                                                         // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                                        // rsp_demux:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                                      // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                                // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                  // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_valid;                                             // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] av_config_avalon_av_config_slave_agent_rp_data;                                              // AV_Config_avalon_av_config_slave_agent:rp_data -> router_005:sink_data
	wire          av_config_avalon_av_config_slave_agent_rp_ready;                                             // router_005:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          av_config_avalon_av_config_slave_agent_rp_startofpacket;                                     // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_endofpacket;                                       // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                        // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_005_src_data;                                                                         // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                                        // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                                      // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                                // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                  // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_valid;                                        // Pixel_Buffer_DMA_avalon_control_slave_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] pixel_buffer_dma_avalon_control_slave_agent_rp_data;                                         // Pixel_Buffer_DMA_avalon_control_slave_agent:rp_data -> router_006:sink_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_ready;                                        // router_006:sink_ready -> Pixel_Buffer_DMA_avalon_control_slave_agent:rp_ready
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_startofpacket;                                // Pixel_Buffer_DMA_avalon_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_endofpacket;                                  // Pixel_Buffer_DMA_avalon_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                        // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_006_src_data;                                                                         // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                                        // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                                      // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                                // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                  // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cpu_jtag_debug_module_agent_rp_valid;                                                        // CPU_jtag_debug_module_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] cpu_jtag_debug_module_agent_rp_data;                                                         // CPU_jtag_debug_module_agent:rp_data -> router_007:sink_data
	wire          cpu_jtag_debug_module_agent_rp_ready;                                                        // router_007:sink_ready -> CPU_jtag_debug_module_agent:rp_ready
	wire          cpu_jtag_debug_module_agent_rp_startofpacket;                                                // CPU_jtag_debug_module_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          cpu_jtag_debug_module_agent_rp_endofpacket;                                                  // CPU_jtag_debug_module_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                        // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_007_src_data;                                                                         // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                                        // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                                      // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                                                // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                  // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                                             // Onchip_Memory_s1_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] onchip_memory_s1_agent_rp_data;                                                              // Onchip_Memory_s1_agent:rp_data -> router_008:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                                             // router_008:sink_ready -> Onchip_Memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;                                                     // Onchip_Memory_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                                                       // Onchip_Memory_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                        // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_008_src_data;                                                                         // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                                        // rsp_demux_004:sink_ready -> router_008:src_ready
	wire    [4:0] router_008_src_channel;                                                                      // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                                                // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                  // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                           // cmd_mux:src_valid -> Pixel_Buffer_avalon_sram_slave_burst_adapter:sink0_valid
	wire   [89:0] cmd_mux_src_data;                                                                            // cmd_mux:src_data -> Pixel_Buffer_avalon_sram_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                           // Pixel_Buffer_avalon_sram_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                                         // cmd_mux:src_channel -> Pixel_Buffer_avalon_sram_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                   // cmd_mux:src_startofpacket -> Pixel_Buffer_avalon_sram_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                     // cmd_mux:src_endofpacket -> Pixel_Buffer_avalon_sram_slave_burst_adapter:sink0_endofpacket
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_valid;                                  // Pixel_Buffer_avalon_sram_slave_burst_adapter:source0_valid -> Pixel_Buffer_avalon_sram_slave_agent:cp_valid
	wire   [89:0] pixel_buffer_avalon_sram_slave_burst_adapter_source0_data;                                   // Pixel_Buffer_avalon_sram_slave_burst_adapter:source0_data -> Pixel_Buffer_avalon_sram_slave_agent:cp_data
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_ready;                                  // Pixel_Buffer_avalon_sram_slave_agent:cp_ready -> Pixel_Buffer_avalon_sram_slave_burst_adapter:source0_ready
	wire    [4:0] pixel_buffer_avalon_sram_slave_burst_adapter_source0_channel;                                // Pixel_Buffer_avalon_sram_slave_burst_adapter:source0_channel -> Pixel_Buffer_avalon_sram_slave_agent:cp_channel
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_startofpacket;                          // Pixel_Buffer_avalon_sram_slave_burst_adapter:source0_startofpacket -> Pixel_Buffer_avalon_sram_slave_agent:cp_startofpacket
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_endofpacket;                            // Pixel_Buffer_avalon_sram_slave_burst_adapter:source0_endofpacket -> Pixel_Buffer_avalon_sram_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [89:0] cmd_demux_src0_data;                                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire   [89:0] cmd_demux_001_src0_data;                                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                    // cmd_demux_002:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_002_src1_data;                                                                     // cmd_demux_002:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_002_src1_ready;                                                                    // cmd_mux_001:sink0_ready -> cmd_demux_002:src1_ready
	wire    [4:0] cmd_demux_002_src1_channel;                                                                  // cmd_demux_002:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                            // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                              // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                    // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_002_src2_data;                                                                     // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire    [4:0] cmd_demux_002_src2_channel;                                                                  // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                            // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                              // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                    // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_002_src3_data;                                                                     // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                    // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire    [4:0] cmd_demux_002_src3_channel;                                                                  // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                            // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                              // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                    // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_002_src4_data;                                                                     // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src4_ready;                                                                    // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire    [4:0] cmd_demux_002_src4_channel;                                                                  // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                            // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                              // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                    // cmd_demux_003:src0_valid -> cmd_mux_003:sink1_valid
	wire  [107:0] cmd_demux_003_src0_data;                                                                     // cmd_demux_003:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src0_ready;                                                                    // cmd_mux_003:sink1_ready -> cmd_demux_003:src0_ready
	wire    [4:0] cmd_demux_003_src0_channel;                                                                  // cmd_demux_003:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                            // cmd_demux_003:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                              // cmd_demux_003:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                    // cmd_demux_003:src1_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] cmd_demux_003_src1_data;                                                                     // cmd_demux_003:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                    // cmd_mux_004:sink1_ready -> cmd_demux_003:src1_ready
	wire    [4:0] cmd_demux_003_src1_channel;                                                                  // cmd_demux_003:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                            // cmd_demux_003:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                              // cmd_demux_003:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [89:0] rsp_demux_src0_data;                                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire   [89:0] rsp_demux_src1_data;                                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                    // rsp_demux_001:src0_valid -> rsp_mux_002:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                                     // rsp_demux_001:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                    // rsp_mux_002:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                                  // rsp_demux_001:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                            // rsp_demux_001:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                              // rsp_demux_001:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                    // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                                     // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                    // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                                  // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                            // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                              // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                    // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                                     // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                    // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                                  // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                            // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                              // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                    // rsp_demux_003:src1_valid -> rsp_mux_003:sink0_valid
	wire  [107:0] rsp_demux_003_src1_data;                                                                     // rsp_demux_003:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_003_src1_ready;                                                                    // rsp_mux_003:sink0_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                                                  // rsp_demux_003:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                            // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                              // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                    // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                                     // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                    // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                                  // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                            // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                              // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                    // rsp_demux_004:src1_valid -> rsp_mux_003:sink1_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                                     // rsp_demux_004:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_004_src1_ready;                                                                    // rsp_mux_003:sink1_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                                                  // rsp_demux_004:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                                            // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                              // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                    // cmd_demux_002:src0_valid -> CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:in_valid
	wire  [107:0] cmd_demux_002_src0_data;                                                                     // cmd_demux_002:src0_data -> CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                    // CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                                                  // cmd_demux_002:src0_channel -> CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                            // cmd_demux_002:src0_startofpacket -> CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                              // cmd_demux_002:src0_endofpacket -> CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:in_endofpacket
	wire          cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_valid;               // CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire   [89:0] cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_data;                // CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_ready;               // cmd_mux:sink2_ready -> CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:out_ready
	wire    [4:0] cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_channel;             // CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_startofpacket;       // CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_endofpacket;         // CPU_data_master_to_Pixel_Buffer_avalon_sram_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src2_valid;                                                                        // rsp_demux:src2_valid -> Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:in_valid
	wire   [89:0] rsp_demux_src2_data;                                                                         // rsp_demux:src2_data -> Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                                        // Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire    [4:0] rsp_demux_src2_channel;                                                                      // rsp_demux:src2_channel -> Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                                // rsp_demux:src2_startofpacket -> Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                  // rsp_demux:src2_endofpacket -> Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_valid;               // Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [107:0] pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_data;                // Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_ready;               // rsp_mux_002:sink0_ready -> Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:out_ready
	wire    [4:0] pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_channel;             // Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_startofpacket;       // Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_endofpacket;         // Pixel_Buffer_avalon_sram_slave_to_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_valid;                                   // Pixel_Buffer_avalon_sram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_data;                                    // Pixel_Buffer_avalon_sram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter:in_0_ready -> Pixel_Buffer_avalon_sram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                               // avalon_st_adapter:out_0_valid -> Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                                // avalon_st_adapter:out_0_data -> Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                               // Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                               // avalon_st_adapter:out_0_error -> Pixel_Buffer_avalon_sram_slave_agent:rdata_fifo_sink_error
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                                 // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                                  // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_001:in_0_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                           // avalon_st_adapter_001:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                            // avalon_st_adapter_001:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                           // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                           // avalon_st_adapter_001:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_valid;                            // Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_data;                             // Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                           // avalon_st_adapter_002:out_0_valid -> Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                            // avalon_st_adapter_002:out_0_data -> Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                           // Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                           // avalon_st_adapter_002:out_0_error -> Pixel_Buffer_DMA_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                                            // CPU_jtag_debug_module_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                                             // CPU_jtag_debug_module_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_003:in_0_ready -> CPU_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                           // avalon_st_adapter_003:out_0_valid -> CPU_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                            // avalon_st_adapter_003:out_0_data -> CPU_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                           // CPU_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                           // avalon_st_adapter_003:out_0_error -> CPU_jtag_debug_module_agent:rdata_fifo_sink_error
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                                                 // Onchip_Memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                                  // Onchip_Memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_004:in_0_ready -> Onchip_Memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                           // avalon_st_adapter_004:out_0_valid -> Onchip_Memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                            // avalon_st_adapter_004:out_0_data -> Onchip_Memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                           // Onchip_Memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                           // avalon_st_adapter_004:out_0_error -> Onchip_Memory_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pixel_processor_dma_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                  (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Pixel_Processor_DMA_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Pixel_Processor_DMA_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_write               (Pixel_Processor_DMA_avalon_master_write),                                              //                          .write
		.av_writedata           (Pixel_Processor_DMA_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_byteenable          (2'b11),                                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_read                (1'b0),                                                                                 //               (terminated)
		.av_readdata            (),                                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pixel_buffer_dma_avalon_pixel_dma_master_translator (
		.clk                    (clk_0_clk_clk),                                                                               //                       clk.clk
		.reset                  (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address            (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Pixel_Buffer_DMA_avalon_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Pixel_Buffer_DMA_avalon_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Pixel_Buffer_DMA_avalon_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (Pixel_Buffer_DMA_avalon_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Pixel_Buffer_DMA_avalon_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (Pixel_Buffer_DMA_avalon_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                                        //               (terminated)
		.av_byteenable          (2'b11),                                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                                        //               (terminated)
		.av_write               (1'b0),                                                                                        //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                                        //               (terminated)
		.uav_clken              (),                                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                                       //               (terminated)
		.av_response            (),                                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                      //                       clk.clk
		.reset                  (CPU_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CPU_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CPU_data_master_read),                                               //                          .read
		.av_readdata            (CPU_data_master_readdata),                                           //                          .readdata
		.av_write               (CPU_data_master_write),                                              //                          .write
		.av_writedata           (CPU_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_readdatavalid       (),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (CPU_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CPU_instruction_master_read),                                               //                          .read
		.av_readdata            (CPU_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_buffer_avalon_sram_slave_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pixel_buffer_avalon_sram_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_buffer_avalon_sram_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_buffer_avalon_sram_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_buffer_avalon_sram_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_buffer_avalon_sram_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_buffer_avalon_sram_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_buffer_avalon_sram_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_buffer_avalon_sram_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_buffer_avalon_sram_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_buffer_avalon_sram_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_buffer_avalon_sram_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_Buffer_avalon_sram_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_Buffer_avalon_sram_slave_write),                  //                         .write
		.av_read                (Pixel_Buffer_avalon_sram_slave_read),                   //                         .read
		.av_readdata            (Pixel_Buffer_avalon_sram_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_Buffer_avalon_sram_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_Buffer_avalon_sram_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (Pixel_Buffer_avalon_sram_slave_readdatavalid),          //                         .readdatavalid
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_buffer_dma_avalon_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                                //                      clk.clk
		.reset                  (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (pixel_buffer_dma_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_buffer_dma_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_buffer_dma_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_buffer_dma_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_buffer_dma_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_buffer_dma_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_buffer_dma_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_buffer_dma_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_buffer_dma_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_buffer_dma_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_buffer_dma_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_Buffer_DMA_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_Buffer_DMA_avalon_control_slave_write),                  //                         .write
		.av_read                (Pixel_Buffer_DMA_avalon_control_slave_read),                   //                         .read
		.av_readdata            (Pixel_Buffer_DMA_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_Buffer_DMA_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_Buffer_DMA_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (CPU_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CPU_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (CPU_jtag_debug_module_write),                  //                         .write
		.av_read                (CPU_jtag_debug_module_read),                   //                         .read
		.av_readdata            (CPU_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (CPU_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (CPU_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (CPU_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (CPU_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Onchip_Memory_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Onchip_Memory_s1_write),                  //                         .write
		.av_readdata            (Onchip_Memory_s1_readdata),               //                         .readdata
		.av_writedata           (Onchip_Memory_s1_writedata),              //                         .writedata
		.av_byteenable          (Onchip_Memory_s1_byteenable),             //                         .byteenable
		.av_chipselect          (Onchip_Memory_s1_chipselect),             //                         .chipselect
		.av_clken               (Onchip_Memory_s1_clken),                  //                         .clken
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (84),
		.PKT_CACHE_L               (81),
		.PKT_THREAD_ID_H           (77),
		.PKT_THREAD_ID_L           (77),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (74),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pixel_processor_dma_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                                        //       clk.clk
		.reset                 (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pixel_processor_dma_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pixel_processor_dma_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pixel_processor_dma_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pixel_processor_dma_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pixel_processor_dma_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pixel_processor_dma_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                    //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                     //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                  //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                              //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                    //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (84),
		.PKT_CACHE_L               (81),
		.PKT_THREAD_ID_H           (77),
		.PKT_THREAD_ID_L           (77),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (74),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pixel_buffer_dma_avalon_pixel_dma_master_agent (
		.clk                   (clk_0_clk_clk),                                                                               //       clk.clk
		.reset                 (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.av_address            (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                       //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                        //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                                     //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                                 //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                       //          .ready
		.av_response           (),                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                      //       clk.clk
		.reset                 (CPU_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                              //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                               //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                            //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                        //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (CPU_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (74),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_buffer_avalon_sram_slave_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (pixel_buffer_avalon_sram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_buffer_avalon_sram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_buffer_avalon_sram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_buffer_avalon_sram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_buffer_avalon_sram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_buffer_avalon_sram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_buffer_avalon_sram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_buffer_avalon_sram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_buffer_avalon_sram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_buffer_avalon_sram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_buffer_avalon_sram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_buffer_avalon_sram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_buffer_avalon_sram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_buffer_avalon_sram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_buffer_avalon_sram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_buffer_avalon_sram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_buffer_avalon_sram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_buffer_avalon_sram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_buffer_avalon_sram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_buffer_avalon_sram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_buffer_avalon_sram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_buffer_avalon_sram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_buffer_avalon_sram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_buffer_avalon_sram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_buffer_avalon_sram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_buffer_avalon_sram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_buffer_avalon_sram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_avalon_sram_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (pixel_buffer_avalon_sram_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_buffer_avalon_sram_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_buffer_avalon_sram_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_buffer_avalon_sram_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_buffer_avalon_sram_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_avalon_sram_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                           //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_buffer_dma_avalon_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                          //             clk.clk
		.reset                   (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (pixel_buffer_dma_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_buffer_dma_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_buffer_dma_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_buffer_dma_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_buffer_dma_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_buffer_dma_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_buffer_dma_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_buffer_dma_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_buffer_dma_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_buffer_dma_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_buffer_dma_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_buffer_dma_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_buffer_dma_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_buffer_dma_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_buffer_dma_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_buffer_dma_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                //                .channel
		.rf_sink_ready           (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_buffer_dma_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_buffer_dma_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_buffer_dma_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_buffer_dma_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (pixel_buffer_dma_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_buffer_dma_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_buffer_dma_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_buffer_dma_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_buffer_dma_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_004_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                           //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (pixel_processor_dma_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pixel_processor_dma_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (pixel_processor_dma_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (pixel_processor_dma_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_processor_dma_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                         //       src.ready
		.src_valid          (router_src_valid),                                         //          .valid
		.src_data           (router_src_data),                                          //          .data
		.src_channel        (router_src_channel),                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_router router_001 (
		.sink_ready         (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //       src.ready
		.src_valid          (router_001_src_valid),                                            //          .valid
		.src_data           (router_001_src_data),                                             //          .data
		.src_channel        (router_001_src_channel),                                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                    //       src.ready
		.src_valid          (router_002_src_valid),                    //          .valid
		.src_data           (router_002_src_data),                     //          .data
		.src_channel        (router_002_src_channel),                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (pixel_buffer_avalon_sram_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_avalon_sram_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_buffer_avalon_sram_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_buffer_avalon_sram_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_avalon_sram_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (pixel_buffer_dma_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_dma_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_buffer_dma_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_buffer_dma_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                         //       src.ready
		.src_valid          (router_006_src_valid),                                         //          .valid
		.src_data           (router_006_src_data),                                          //          .data
		.src_channel        (router_006_src_channel),                                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                    //       src.ready
		.src_valid          (router_008_src_valid),                    //          .valid
		.src_data           (router_008_src_data),                     //          .data
		.src_channel        (router_008_src_channel),                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pixel_buffer_avalon_sram_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                      //       cr0.clk
		.reset                 (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                  //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                   //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                  //          .ready
		.source0_valid         (pixel_buffer_avalon_sram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_buffer_avalon_sram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_buffer_avalon_sram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_buffer_avalon_sram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_buffer_avalon_sram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_buffer_avalon_sram_slave_burst_adapter_source0_ready)          //          .ready
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                      //      sink.ready
		.sink_channel       (router_src_channel),                                    //          .channel
		.sink_data          (router_src_data),                                       //          .data
		.sink_startofpacket (router_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                  //      sink.ready
		.sink_channel       (router_001_src_channel),                                //          .channel
		.sink_data          (router_001_src_data),                                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_001_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_001_src0_data),                               //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.src1_data          (cmd_demux_002_src1_data),                 //          .data
		.src1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                //          .valid
		.src2_data          (cmd_demux_002_src2_data),                 //          .data
		.src2_channel       (cmd_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                //          .valid
		.src3_data          (cmd_demux_002_src3_data),                 //          .data
		.src3_channel       (cmd_demux_002_src3_channel),              //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),          //          .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                //      src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                //          .valid
		.src4_data          (cmd_demux_002_src4_data),                 //          .data
		.src4_channel       (cmd_demux_002_src4_channel),              //          .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                //          .valid
		.src0_data          (cmd_demux_003_src0_data),                 //          .data
		.src0_channel       (cmd_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                //          .valid
		.src1_data          (cmd_demux_003_src1_data),                 //          .data
		.src1_channel       (cmd_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                     //          .valid
		.src_data            (cmd_mux_src_data),                                                                      //          .data
		.src_channel         (cmd_mux_src_channel),                                                                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                                //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                                        //          .endofpacket
		.sink2_ready         (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                              //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                            //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                               //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //          .valid
		.src_data            (cmd_mux_002_src_data),                                  //          .data
		.src_channel         (cmd_mux_002_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                              //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                            //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                               //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                  //      sink.ready
		.sink_channel       (router_004_src_channel),                                //          .channel
		.sink_data          (router_004_src_data),                                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_004_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                  //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                  //          .valid
		.src2_data          (rsp_demux_src2_data),                                   //          .data
		.src2_channel       (rsp_demux_src2_channel),                                //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                  //      sink.ready
		.sink_channel       (router_005_src_channel),                                //          .channel
		.sink_data          (router_005_src_data),                                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_005_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                  //      sink.ready
		.sink_channel       (router_006_src_channel),                                //          .channel
		.sink_data          (router_006_src_data),                                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_006_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                     //          .valid
		.src_data            (rsp_mux_src_data),                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                //          .channel
		.sink0_data          (rsp_demux_src0_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                 //          .valid
		.src_data            (rsp_mux_001_src_data),                                  //          .data
		.src_channel         (rsp_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                //          .channel
		.sink0_data          (rsp_demux_src1_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                                 //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                                 //          .valid
		.src_data            (rsp_mux_002_src_data),                                                                  //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                               //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                              //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                              //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                            //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                               //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                                      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                                        //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                              //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                              //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                            //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                               //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                                      //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                                                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                   //          .valid
		.src_data            (rsp_mux_003_src_data),                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),              //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                 //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                 //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (CPU_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                              //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                               //          .data
		.out_endofpacket      (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cpu_data_master_to_pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                                  //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                                //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                            //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                                  //          .ready
		.in_data              (rsp_demux_src2_data),                                                                   //          .data
		.out_endofpacket      (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_sram_slave_to_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                    // in_clk_0.clk
		.in_rst_0_reset (Pixel_Processor_DMA_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                 //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_jtag_debug_module_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_jtag_debug_module_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_jtag_debug_module_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_n_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)            //         .error
	);

endmodule
