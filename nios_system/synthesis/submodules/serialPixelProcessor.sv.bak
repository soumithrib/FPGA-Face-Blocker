module serialPixelProcessor(

	input clk,
	input reset,
	
	input 			[15:0] inPixel,
	input 			[15:0] skinPixel,
	input 			[15:0] pixelCountThreshold,
	output logic 	[15:0] outPixel);
	
	logic detected;
	
	comparePixels CP000(.inPixel, 
							  .skinPixel,
							  .detected);
	
	int i, x, y, xSquare, ySquare, rowMajorSquareIdx;
	int counter = 0;
	int pixelCounter [640/40 * 480/40];		      // store number of skin tone pixels in each square 
	logic squareStatus [640/40 * 480/40];				// store state of region (1 = blur, 0 = pass through) 
																	
	initial														// initialize region counters and status registers
	begin
		for (i = 0; i < 12 * 16; i++)
			squareStatus[i] = 0;
		for (i = 0; i < 12 * 16; i++)
			pixelCounter[i] = 0;
	end
	
	always_comb
	begin
		x = counter % 320;											// compute row major addresss of counter register from state counter
		y = counter / 320;
		xSquare = x/320 * 16;
		ySquare = y/240 * 12;
		rowMajorSquareIdx = ySquare * 16 + xSquare;
	end
	always_ff @(posedge Clk)
	begin 
		if (Reset)														// reset case
		begin	
			counter = 0;
			for (i = 0; i < 12 * 16; i++)
				squareStatus[i] = 0;
			for (i = 0; i < 12 * 16; i++)
				pixelCounter[i] = 0;
		end
		else
		begin
			if (counter == 320 * 240 - 1)							// EOF reached
			begin															// update pixel status registers
				for (i = 0; i < 12 * 16; i++)
				begin
					if (pixelCounter[i] > pixelCountThreshold)
						squareStatus[i] = 1;
					else
						squareStatus[i] = 0;
				end
				counter = 0;											// set state counter back to 0
			end
			else
			begin											
				if (detected)											// increment counter register of current square
				begin
					pixelCounter[rowMajorSquareIdx]++;			
				end
			end
			counter++;													// increment state counter
		end
	end
	always_comb
	begin 
		if (squareStatus[rowMajorSquareIdx])
			outPixel = skinPixel;
		else
			outPixel = inPixel;
	end
	
endmodule